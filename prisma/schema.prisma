// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model Role {
  id    String   @id @default(cuid())
  name  UserRole @unique
  users User[]

  @@map("roles")
}

model User {
  id        String  @id @default(cuid())
  name      String?
  firstName String?
  lastName  String?
  phone     String?

  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  roleId                String?
  role                  Role?                  @relation(fields: [roleId], references: [id])
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  orders Order[]
  store  Store?  @relation("AdminOfStore") // 1-to-1, opsional hanya jika dia admin
  carts  Cart[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationTokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("passwordResetToken")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("twoFactorToken")
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("twoFactorConfirmation")
}

model Store {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(150)
  slug        String  @unique @db.VarChar(150)
  description String  @db.Text
  mapEmbed    String  @db.Text
  /// [Image]
  bannerImgs  Json[]
  adminId     String  @unique
  admin       User    @relation("AdminOfStore", fields: [adminId], references: [id])
  pakets      Paket[]
  order       Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("store")
}

enum TStatusOrder {
  SETTLEMENT
  PENDING
  Deny
  DENY
  CANCEL
  EXPIRE
  REFUND
  PARTIAL_REFUND
  CHARGEBACK
  PARTIAL_CHARGEBACK
  AUTHORIZE
  CAPTURE
  FAILURE
}

enum TPaymentMethod {
  MANUAL
  AUTO
}

enum TLaundryStatus {
  // Status awal setelah pesanan dikonfirmasi/dibayar
  AWAITING_PROCESSING // Menunggu untuk diproses/dikerjakan
  // Status pengerjaan
  IN_PROGRESS // Sedang dalam pengerjaan (laundry)
  QUALITY_CHECK // Pemeriksaan kualitas (setelah pengerjaan selesai)
  // Status siap diambil
  READY_FOR_COLLECTION // Pesanan sudah siap dan menunggu diambil oleh pelanggan di lokasi
  // Status selesai
  COMPLETED // Pesanan telah diambil oleh pelanggan dan dianggap selesai sepenuhnya
  // Status bermasalah/penundaan
  ON_HOLD // Ditahan karena alasan tertentu (misal: menunggu konfirmasi pelanggan, masalah pada sepatu)
}

enum TPriority {
  low
  medium
  high
}

model Order {
  id            String         @id @default(cuid())
  totalPrice    Int            @db.Integer
  paymentMethod TPaymentMethod @default(MANUAL)
  paymentToken  String? // Token Snap (WAJIB)
  redirectUrl   String?
  status        TStatusOrder   @default(PENDING) // transaction
  laundryStatus TLaundryStatus @default(AWAITING_PROCESSING)
  priority      TPriority      @default(low)

  /// [Image]
  shoesImages Json[]

  pakets PaketOrder[]
  user   User         @relation(fields: [userId], references: [id])
  userId String

  /// [InformationCustomer]
  informationCustomer Json?

  storeId String // âœ… Foreign key ke Store
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order")
}

model Paket {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(100)
  description String       @db.Text
  price       Int          @db.Integer
  /// [Image]
  image       Json[]
  isVisible   Boolean      @default(true)
  rating      Int          @default(0) @db.SmallInt
  stores      Store[]
  orders      PaketOrder[]

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("paket")
}

model PaketOrder {
  id         String @id @default(cuid())
  orderId    String
  order      Order  @relation(fields: [orderId], references: [id])
  paketId    String
  paket      Paket  @relation(fields: [paketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  priceOrder Int?
  quantity   Int    @db.SmallInt

  createdAt DateTime @default(now())

  @@map("paketOrder")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  /// [ItemsPaket]
  items     Json[]
  closed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(50)
  description String  @db.Text
  pakets      Paket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}
